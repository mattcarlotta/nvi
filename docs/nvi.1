.\" Automatically generated by Pandoc 3.1.2
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "nvi" "1" "09-26-2023" "CLI Documentation v0.0.2" ""
.hy
.SH NAME
.PP
\f[B]nvi\f[R] \[em] a stand-alone .env file parser for interpolating and
assigning multiple .env files into a process.
.SH SYNOPSIS
.PP
nvi [\f[B]options\f[R]]
.SH DESCRIPTION
.PP
nvi is a zero-dependency, stand-alone binary that parses and
interpolates .env files.
It will either print ENVs as stringified JSON to standard output or it
will assign them to a forked child process.
.PP
All options below are optional.
Short form (-) and long form (--) flags are supported and can be mixed
if desired.
.PP
If no flags are assigned, then an .env (that is named \[lq].env\[rq])
located at the current directory will be parsed and printed to standard
out.
.SH OPTIONS
.TP
-c, --config \f[I]environment\f[R]
Specifies which environment config to load from the .nvi file.
.RS
.PP
When this flag is present, then the options below are ignored as they
should be defined within the .nvi configuration file.
.RE
.TP
-de, --debug
Specifies whether or not to log debug details.
.TP
-d, --dir \f[I]path\f[R]
Specifies which directory path the .env files are located within.
The \f[I]path\f[R] will be relative to the current directory.
.TP
-- \f[I]command\f[R]
A system command to run in a forked child process that has been assigned
with the parsed ENVs.
This should be last flag defined, therefore anything placed after it
will be consumed as part of the system command.
.TP
-e --env \f[I]environment\f[R]
Specifies which environment config to use within a remote project.
Remote environments are created via the front-facing web application.
.TP
-f, --files \f[I]file\f[R]
A list of .env files to parse.
Each specified \f[I]file\f[R] needs to be separated by a space.
.TP
-h, --help
Prints brief CLI flag usage information.
.TP
-p, --project \f[I]project\f[R]
Specifies which remote project to select from the nvi API.
Remote projects are created via the front-facing web application.
.TP
-r, --required \f[I]KEY\f[R]
A list of ENV keys are that required to exist after parsing.
Each specified \f[I]KEY\f[R] needs to be separated by a space.
.TP
-v, --version
Prints the current version number.
.SH EXIT STATUS
.PP
nvi exits\ 0 on success, and\ 1 if an error occurs.
.SH FILES
.TP
\f[I]*/.nvi\f[R]
Global project environment configuration file.
.TP
\f[I]*/*.env.*\f[R]
One or many files containing ENVs to be parsed and interpolated.
.SH EXAMPLES
.PP
Parsing a local \f[V]example.env\f[R] file from a custom directory with
debug logging:
.IP
.nf
\f[C]
$ nvi --files example.env --dir dist/client --debug
\f[R]
.fi
.PP
Parsing one or many local \f[V].env\f[R] files from a .nvi configuration
file typically located at a project\[cq]s root directory:
.IP
.nf
\f[C]
$ nvi --config standard
\f[R]
.fi
.PP
Parsing a local \f[V].env\f[R] file, checking the parsed ENVs for
required keys, and then, if good, applying those ENVs to a spawned
\[lq]npm\[rq] child process:
.IP
.nf
\f[C]
$ nvi --files .env --required KEY1 KEY2 -- npm run dev
\f[R]
.fi
.PP
To retrieve remote ENVs from the nvi API, you must first register and
verify your email using the front-facing
application (https://github.com/mattcarlotta/nvi-app).
- Once registered and verified, create a project, an environment and at
least 1 ENV secret within the environment - Navigate to your account
settings page, locate your unique API key and click the copy to
clipboard button - Using the nvi CLI tool, input the following flags: -
\[lq]-p\[rq] | \[lq]\[en]project\[rq] followed by a space and then the
name of the project you\[cq]ve created - \[lq]-e\[rq] |
\[lq]\[en]env\[rq] followed by a space and then the name of the
environment you\[cq]ve created - \[lq]\[en]\[rq] followed by a space and
then a system command to run - Prss the \[lq]Enter\[rq] key and nvi will
prompt you for your unique API key - Input the API key and nvi will
attempt to retrieve and assign remote ENVs from the selected project and
environment to the command (if no command is provided then nvi will just
print the parsed and interpolated envs to standard out)
.PP
Retrieving remote ENVs:
.IP
.nf
\f[C]
$ nvi -p my_project -e development -- cargo run
\f[R]
.fi
.PP
Then, you\[cq]ll be asked for your API key:
.IP
.nf
\f[C]
$ [nvi] Please enter your unique API key: 
\f[R]
.fi
.PP
Input your API key and press the \[lq]Enter\[rq] key:
.IP
.nf
\f[C]
$ [nvi] Please enter your unique API key: abcdefhijkhijklo0123456789
\f[R]
.fi
.PP
If no error is displayed in the terminal, then a child process should be
spawned with the command OR ENVs will be printed to standard out as
stringified JSON.
.PP
The following represents an example \f[V].nvi\f[R] configuration:
.IP
.nf
\f[C]
[dev]
debug = true
dir = \[dq]path/to/custom/dir\[dq]
files = [ \[dq].env\[dq], \[dq]base.env\[dq], \[dq]reference.env\[dq] ]
exec = \[dq]bin dev\[dq]
required = [ \[dq]TEST1\[dq], \[dq]TEST2\[dq], \[dq]TEST3\[dq] ]

[staging]
files = [ \[dq].env\[dq] ]
required = [ \[dq]TEST1\[dq] ]

[remote_dev]
project = \[dq]my_project\[dq]
env = \[dq]development\[dq]
exec = \[dq]bin dev\[dq]
required = [ \[dq]TEST1\[dq], \[dq]TEST2\[dq], \[dq]TEST3\[dq] ]
\f[R]
.fi
.PP
To target a configuration within the .nvi config file, simply use the
\f[V]-c\f[R] or \f[V]--config\f[R] flag followed by the config name:
.IP
.nf
\f[C]
$ nvi -c dev
\f[R]
.fi
.PP
or
.IP
.nf
\f[C]
$ nvi --config dev
\f[R]
.fi
.PP
Please read
this (https://github.com/mattcarlotta/nvi#what-are-the-nvi-configuration-file-specs)
for config file specs.
.SH SEE ALSO
.PP
Source (https://github.com/mattcarlotta/nvi)
.PP
Issues (https://github.com/mattcarlotta/nvi/issues)
.PP
Documentation (https://github.com/mattcarlotta/nvi#README)
.SH LICENSE
.PP
Copyright 2023 (C) Matt Carlotta.
GPL-3.0 licensed.
.SH AUTHORS
Matt Carlotta.
