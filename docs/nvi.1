.\" Automatically generated by Pandoc 3.1.6
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "nvi" "1" "07-31-2023" "documentation v0.0.1" ""
.hy
.SH NAME
.PP
\f[B]nvi\f[R] \[em] a stand-alone .env file parser for interpolating and
assigning multiple .env files into a process.
.SH SYNOPSIS
.PP
nvi [\f[B]options\f[R]]
.SH DESCRIPTION
.PP
nvi is a zero-dependency, stand-alone binary that parses and
interpolates .env files.
It will either print ENVs as stringified JSON to standard output or it
will assign them to a forked child process.
.SS OPTIONS
.TP
-c, \[en]config \f[I]environment\f[R]
Specifies which environment config to load from the .nvi file.
.RS
.PP
When this flag is present, then the options below are ignored as they
should be defined within the .nvi configuration file.
.RE
.TP
-de, \[en]debug
Specifies whether or not to log debug details.
.TP
-d, \[en]dir \f[I]path\f[R]
Specifies which directory path the .env files are located within.
The \f[I]path\f[R] will used as a relative to the current directory.
.TP
-e, \[en]exec \f[I]command\f[R]
A command to run in a forked child process that has been assigned parsed
ENVs.
.TP
-f, \[en]files \f[I]file\f[R]
A list of .env files to parse.
Each specified \f[I]file\f[R] needs to be separated by a space.
.TP
-h, \[en]help
Prints brief CLI flag usage information.
.TP
-r, \[en]required \f[I]KEY\f[R]
A list of ENV keys are that required to exist after parsing.
Each specified \f[I]KEY\f[R] needs to be separated by a space.
.TP
-v, \[en]version
Prints the current version number.
.SH EXIT STATUS
.PP
nvi exits\ 0 on success, and\ 1 if an error occurs.
.SH FILES
.TP
\f[I]*/.nvi\f[R]
Global project environment configuration file.
.TP
\f[I]*/*.env.*\f[R]
One or many files containing ENVs to be parsed and interpolated.
.SH EXAMPLES
.PP
Parsing an \f[V]example.env\f[R] file from a custom directory with debug
logging:
.IP
.nf
\f[C]
$ nvi --files example.env --dir dist/client --debug
\f[R]
.fi
.PP
Parsing one or many \f[V].env\f[R] files from a .nvi configuration file
typically located at a project\[cq]s root directory:
.IP
.nf
\f[C]
$ nvi --config standard
\f[R]
.fi
.PP
Parsing an \f[V].env\f[R] file, checking the parsed ENVs for required
keys, and then, if good, applying those ENVs to a spawned \[lq]npm\[rq]
child process:
.IP
.nf
\f[C]
$ nvi --files .env --exec npm run dev --required KEY1 KEY2
\f[R]
.fi
.PP
The following represents an example \f[V].nvi\f[R] configuration:
.IP
.nf
\f[C]
[dev]
debug = true
dir = \[dq]path/to/custom/dir\[dq]
files = [ \[dq].env\[dq], \[dq]base.env\[dq], \[dq]reference.env\[dq] ]
exec = \[dq]bin test\[dq]
required = [ \[dq]TEST1\[dq], \[dq]TEST2\[dq], \[dq]TEST3\[dq] ]

[staging]
files = [ \[dq].env\[dq] ]
required = [ \[dq]TEST1\[dq] ]
\f[R]
.fi
.PP
To target an environment within the configuration file, simply use the
\f[V]-c\f[R] or \f[V]--config\f[R] flag followed by the environment
name:
.IP
.nf
\f[C]
$ nvi -c dev
\f[R]
.fi
.PP
or
.IP
.nf
\f[C]
$ nvi --config staging
\f[R]
.fi
.PP
Please read
this (https://github.com/mattcarlotta/nvi#what-are-the-nvi-configuration-file-specs)
for config file specs.
.SH SEE ALSO
.PP
Source (https://github.com/mattcarlotta/nvi)
.PP
Issues (https://github.com/mattcarlotta/nvi/issues)
.PP
Documentation (https://github.com/mattcarlotta/nvi#README)
.SH LICENSE
.PP
Copyright 2023 (C) Matt Carlotta.
GPL-3.0 licensed.
.SH AUTHORS
Matt Carlotta.
